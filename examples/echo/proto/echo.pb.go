// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package proto

import (
	context "context"
	fmt "fmt"
	client "github.com/fananchong/v-micro/client"
	server "github.com/fananchong/v-micro/server"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Num                  uint32   `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Response struct {
	Num                  uint32   `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "proto.Request")
	proto.RegisterType((*Response)(nil), "proto.Response")
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_08134aea513e0001) }

var fileDescriptor_08134aea513e0001 = []byte{
	// 111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd2, 0x5c, 0xec, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x02, 0x5c, 0xcc, 0x7e, 0xa5, 0xb9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xbc, 0x41, 0x20, 0xa6, 0x92, 0x0c, 0x17, 0x47, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71,
	0x2a, 0xa6, 0xac, 0x91, 0x21, 0x17, 0x8b, 0x6b, 0x72, 0x46, 0xbe, 0x90, 0x26, 0x94, 0xe6, 0x83,
	0x98, 0xac, 0x07, 0x35, 0x4f, 0x8a, 0x1f, 0xce, 0x87, 0x18, 0xa1, 0xc4, 0x90, 0xc4, 0x06, 0x16,
	0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x5c, 0xfa, 0x44, 0x89, 0x00, 0x00, 0x00,
}

// Client API for Echo service

type EchoService interface {
	Echo(ctx context.Context, req *Request, opts ...client.CallOption) error
}

type EchoCallback interface {
	Echo(ctx context.Context, rsp *Response)
}

type echoService struct {
	c    client.Client
	name string
}

func NewEchoService(name string, hdcb EchoCallback, c client.Client) EchoService {
	if c == nil {
		panic("client is nil")
	}
	if len(name) == 0 {
		panic("name is nil")
	}
	if err := c.Handle(hdcb); err != nil {
		panic(err)
	}
	return &echoService{
		c:    c,
		name: name,
	}
}

func (c *echoService) Echo(ctx context.Context, req *Request, opts ...client.CallOption) error {
	r := c.c.NewRequest(c.name, "Echo.Echo", req)
	err := c.c.Call(ctx, r, opts...)
	if err != nil {
		return err
	}
	return nil
}

// Server API for Echo service

type EchoHandler interface {
	Echo(ctx context.Context, req *Request, rsp *Response) error
}

func RegisterEchoHandler(s server.Server, hdlr EchoHandler) error {
	return s.Handle(hdlr)
}
